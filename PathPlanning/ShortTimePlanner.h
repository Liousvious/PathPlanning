// This class is used to generate a trajectory to the goal position
#pragma once

#include "Variables.h"
#include "BaseType.h"
#include <vector>
#include "PathGenerateTool.h"
#include "lcmtype\VeloGrid_t.hpp"
#include "PathDraw.h"

using namespace ckLcmType;

class ShortTimePlanner
{
public:
	ShortTimePlanner();
	~ShortTimePlanner();

	//return the best trajectory 
	std::vector<RoadPoint> GetBestTrajecoty();
	void Plan(const std::vector<RoadPoint> pre_rootGlobal = std::vector<RoadPoint>(), bool isUTurn = false);
	bool IsSegment();
	double GetPreFactor();
	double GetCurFactor();
//private functions
private:
	std::vector<RoadPoint> trajectory_build(float qf, float qi, float theta, double sf, SXYSpline& spline);//build a single trajectory
	std::vector<std::vector<RoadPoint>> generateTrajectories(std::vector<RoadPoint>& baseFrame, bool local);//build candidate trajectories
	std::vector<std::vector<RoadPoint>> planWithRef(std::vector<RoadPoint>& baseFrame);//return candidate paths
	std::vector<std::vector<RoadPoint>> planWithSegment(std::vector<RoadPoint>& baseFrame);//return candidate paths
	std::vector<std::vector<RoadPoint>> planWithUTurn(std::vector<RoadPoint>& baseFrame);//U-Turn场景下路径规划
	std::vector<std::vector<RoadPoint>> planWithUTurn1(std::vector<RoadPoint>& baseFrame, bool isLocal = false);

	//Select a best trajectory from candidates
	std::vector<RoadPoint> SelectBestTrajectory(std::vector<std::vector<RoadPoint>>& paths, std::vector<RoadPoint>& prePath, std::vector<RoadPoint>& refPath, double& min_maxDis);

	//update path or not, this function will be move to decision
	bool updateTrajectory(std::vector<RoadPoint>& curPath, std::vector<RoadPoint>& prePath, std::vector<RoadPoint>& refPath);
	


//private variables
private:
	std::vector<RoadPoint> m_bestTrajectory;//Trajectory generated by the planner
	std::vector<RoadPoint> m_preRootLocal;////previous path generated, stored with relative coordinate
	std::vector<RoadPoint> m_baseFrame;//Baseframe used in the algorithm
	std::vector<RoadPoint> m_preRoot;//previous path generated, stored with global coordinate
	int m_baseFrameCount;//number of baseframe
	bool m_isSegmentMode;//whether use segment to plan
	double m_targetX, m_targetY, m_targetTheta;//Planning target(x, y, θ), maybe useful
	float m_testVelocityFactor;//for velocity encourage test

	double m_preFactor;//上一条路径与参考路径的距离度量值
	double m_curFactor;//本次规划结果与参考路径的距离度量值
	PathDraw m_pathsDraw;
	bool m_isInUTurn;//是否处于U-Turn过程中
};

